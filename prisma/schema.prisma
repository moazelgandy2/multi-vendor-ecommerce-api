// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  USER
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String @unique
  phone    String @unique
  password String
  role     Role   @default(USER)

  products Product[]
  reviews  Review[]
  cart     Cart[]
  orders   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int
  sold        Int    @default(0)
  image       String

  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  reviews Review[]
  cart    Cart[]
  Order   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Int
  comment String

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  amount Int
  total  Float

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  status String
  total  Float

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
