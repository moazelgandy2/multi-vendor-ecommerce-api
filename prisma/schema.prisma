// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  USER
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  state     String
  zip       String
  isDefault Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String @unique
  phone    String @unique
  password String

  role Role @default(USER)

  products Product[]
  reviews  Review[]
  cart     Cart[]
  orders   Order[]
  WishList WishList[]
  Address  Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int
  sold        Int    @default(0)
  image       String

  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  reviews  Review[]
  CartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WishList   WishList[]
  orderItems OrderItems[]
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float
  comment String

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  total Float

  totalAfterDiscount Float?
  discount           Float? @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  amount   Float

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
}

model WishList {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeliveryOrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELIVERED
}

enum paymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentType {
  COD
  CARD
}

model Order {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  total Float

  status paymentStatus @default(PENDING)

  paymentType PaymentType
  delivery    DeliveryOrderStatus @default(PENDING)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  orderItems OrderItems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItems {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
